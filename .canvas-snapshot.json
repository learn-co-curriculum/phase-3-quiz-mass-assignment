{
  "quiz": {
    "id": 19085,
    "title": "Metaprogramming Quiz",
    "html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19085",
    "mobile_url": "https://learning.flatironschool.com/courses/3299/quizzes/19085?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-3-quiz-mass-assignment\"></div>\n<header class=\"fis-header\"><a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-3-quiz-mass-assignment/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a></header>\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide. Note any answers that were marked incorrect, so you can study the relevant material and try this quiz again.</p>\n<p>If you don't know the answer to a question, please do not guess. Instead, select \"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 8,
    "points_possible": 8.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_19085"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19085/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19085/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19085/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19085/submission_versions",
    "assignment_id": 129360,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 9648,
    "show_correct_answers_last_attempt": true,
    "version_number": 6,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "gb10d37a7c1b2a9ec1a090650a38b8eb5",
    "question_types": [
      "multiple_choice_question",
      "multiple_answers_question",
      "true_false_question"
    ]
  },
  "questions": [
    {
      "quiz_id": 19085,
      "id": 120495,
      "quiz_group_id": null,
      "assessment_question_id": 182800,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<p>We are declaring a method that needs to take five arguments. What is the best\nway to declare this method?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments\">Keyword Arguments</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5258,
          "text": "",
          "html": "<p>Define the method using keyword arguments.</p>",
          "comments": "",
          "comments_html": "<p>Correct! By using keyword arguments, we can associate each value with a\nmeaningful key or name.</p>",
          "weight": 100.0
        },
        {
          "id": 1912,
          "text": "",
          "html": "<p>Define the method using regular parameters separated with commas.</p>",
          "comments": "",
          "comments_html": "<p>Not quite. What happens if another dev calls the method with the arguments in\nthe wrong order? As a <a href=\"https://rubystyle.guide/#too-many-params\">general rule</a>, try to avoid defining\nmore than three or four parameters for a single method.</p>",
          "weight": 0.0
        },
        {
          "id": 4843,
          "text": "",
          "html": "<p>There's no benefit to choosing regular parameters or keyword arguments.</p>",
          "comments": "",
          "comments_html": "<p>Not quite. By using keyword arguments, we can associate each value with a\nmeaningful key or name which means we don't need to worry about the order the\narguments are passed in. As a <a href=\"https://rubystyle.guide/#too-many-params\">general rule</a>, try to avoid\ndefining more than three or four parameters for a single method.</p>",
          "weight": 0.0
        },
        {
          "id": 2432,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120496,
      "quiz_group_id": null,
      "assessment_question_id": 182802,
      "position": null,
      "question_name": "Question",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">,</span> <span class=\"n\">programming_language</span><span class=\"p\">)</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Hello, </span><span class=\"si\">#{</span><span class=\"nb\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Welcome to the </span><span class=\"si\">#{</span><span class=\"n\">programming_language</span><span class=\"si\">}</span><span class=\"s2\"> curriculum\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">greeting</span><span class=\"p\">(</span><span class=\"s2\">\"Ruby\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Leroy Jenkins\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What will the code sample above output?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments\">Keyword Arguments</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6050,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Hello, Ruby\nWelcome to the Leroy Jenkins curriculum\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Exactly! The method will use the arguments in the order they were provided.</p>",
          "weight": 100.0
        },
        {
          "id": 1423,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Hello, Leroy Jenkins\nWelcome to the Ruby curriculum\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Take a look at the code block again. In which order will the method receive and\nuse the arguments?</p>",
          "weight": 0.0
        },
        {
          "id": 4629,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120497,
      "quiz_group_id": null,
      "assessment_question_id": 182803,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">,</span> <span class=\"n\">programming_language</span><span class=\"p\">)</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Hello, </span><span class=\"si\">#{</span><span class=\"nb\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Welcome to the </span><span class=\"si\">#{</span><span class=\"n\">programming_language</span><span class=\"si\">}</span><span class=\"s2\"> curriculum\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">greeting</span><span class=\"p\">(</span><span class=\"ss\">programming_language: </span><span class=\"s2\">\"Ruby\"</span><span class=\"p\">,</span> <span class=\"ss\">name: </span><span class=\"s2\">\"Leroy Jenkins\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What will the code sample above output?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments\">Keyword Arguments</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5441,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>ArgumentError: wrong number of arguments (given 1, expected 2)\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Fantastic! Because we have not set up our method with keyword arguments, passing\na Hash instead of two separate arguments will give us an argument error.</p>",
          "weight": 100.0
        },
        {
          "id": 9775,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Hello, Ruby\nWelcome to the Leroy Jenkins curriculum\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. What would have to change about how <code>greeting</code> is invoked for the\ncode to produce this output.</p>",
          "weight": 0.0
        },
        {
          "id": 4978,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Hello, Leroy Jenkins\nWelcome to the Ruby curriculum\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. For the code to produce this output, what would need to change in the\nmethod declaration?</p>",
          "weight": 0.0
        },
        {
          "id": 5007,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120498,
      "quiz_group_id": null,
      "assessment_question_id": 182804,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">:,</span> <span class=\"n\">programming_language</span><span class=\"p\">:)</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Hello, </span><span class=\"si\">#{</span><span class=\"nb\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Welcome to the </span><span class=\"si\">#{</span><span class=\"n\">programming_language</span><span class=\"si\">}</span><span class=\"s2\"> curriculum\"</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">greeting</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"s2\">\"Leroy Jenkins\"</span><span class=\"p\">,</span> <span class=\"ss\">programming_language: </span><span class=\"s2\">\"Ruby\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What will the code sample above output?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments\">Keyword Arguments</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6022,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Hello, Leroy Jenkins\nWelcome to the Ruby curriculum\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Yes! <code>greeting</code> is using keyword arguments, so when we pass a Hash containing\nkey-value pairs, it correctly maps those values to the appropriate arguments.</p>",
          "weight": 100.0
        },
        {
          "id": 7951,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>Hello, Ruby\nWelcome to the Leroy Jenkins curriculum\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Take a look at the method and how it's invoked. Which value will be used\nwhere?</p>",
          "weight": 0.0
        },
        {
          "id": 9175,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight plaintext\"><code>ArgumentError: wrong number of arguments (given 1, expected 2)\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p><code>greeting</code> was declared with keyword arguments. What data type do we pass to\nmethods that use keyword arguments?</p>",
          "weight": 0.0
        },
        {
          "id": 7933,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120500,
      "quiz_group_id": null,
      "assessment_question_id": 182806,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<p>We want to be able to do the following:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">rat_counter</span><span class=\"p\">(</span><span class=\"ss\">rat_count: </span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"ss\">train_line: </span><span class=\"s2\">\"B train\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># =&gt; \"There are 2 rats on the B train\"</span>\n</code></pre></div>\n<p>Which <code>rat_counter</code> method will achieve this?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments\">Keyword Arguments</a></li></ul><p></p>",
      "answers": [
        {
          "id": 4885,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">rat_counter</span><span class=\"p\">(</span><span class=\"n\">rat_count</span><span class=\"p\">:,</span> <span class=\"n\">train_line</span><span class=\"p\">:)</span>\n  <span class=\"s2\">\"There are </span><span class=\"si\">#{</span><span class=\"n\">rat_count</span><span class=\"si\">}</span><span class=\"s2\"> rats on the </span><span class=\"si\">#{</span><span class=\"n\">train_line</span><span class=\"si\">}</span><span class=\"s2\">.\"</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Perfect! By using keyword arguments, we can pass a Hash to the method and\nreturn a String with all of the values in their right places.</p>",
          "weight": 100.0
        },
        {
          "id": 336,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">def</span> <span class=\"nf\">rat_counter</span><span class=\"p\">(</span><span class=\"n\">rat_count</span><span class=\"p\">,</span> <span class=\"n\">train_line</span><span class=\"p\">)</span>\n  <span class=\"s2\">\"There are </span><span class=\"si\">#{</span><span class=\"n\">rat_count</span><span class=\"si\">}</span><span class=\"s2\"> rats on the </span><span class=\"si\">#{</span><span class=\"n\">train_line</span><span class=\"si\">}</span><span class=\"s2\">.\"</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. This method takes two separate arguments and the order of those\narguments will matter. What changes can we make to fix this so that it takes a\nHash when it's invoked?</p>",
          "weight": 0.0
        },
        {
          "id": 2162,
          "text": "",
          "html": "<p>Either of these options will work</p>",
          "comments": "",
          "comments_html": "<p>Not quite. We need to set up our method to use keyword arguments in order to\nbe able to pass in a Hash when it's invoked.</p>",
          "weight": 0.0
        },
        {
          "id": 1401,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120501,
      "quiz_group_id": null,
      "assessment_question_id": 183438,
      "position": null,
      "question_name": "Mass Assignment: Class Initialization",
      "question_type": "true_false_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:age</span><span class=\"p\">,</span> <span class=\"ss\">:location</span><span class=\"p\">,</span> <span class=\"ss\">:user_name</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">user_name</span><span class=\"p\">:,</span> <span class=\"nb\">name</span><span class=\"p\">:,</span> <span class=\"n\">age</span><span class=\"p\">:,</span> <span class=\"n\">location</span><span class=\"p\">:)</span>\n    <span class=\"vi\">@user_name</span> <span class=\"o\">=</span> <span class=\"n\">user_name</span>\n    <span class=\"vi\">@name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span>\n    <span class=\"vi\">@location</span> <span class=\"o\">=</span> <span class=\"n\">location</span>\n    <span class=\"vi\">@age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>The above code snippet is considered <em>metaprogramming</em>.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "<p>Correct! Here we are explicitly specifying the names of our attributes. In metaprogramming, we **abstract away** the attribute names by using the `send` method.</p>",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/mass-assignment-and-class-initialization\">Mass Assignment and Class Initialization</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Here we are explicitly specifying the names of our attributes. In\nmetaprogramming, we <strong>abstract away</strong> the attribute names by using the <code>send</code>\nmethod. Be sure to study the source/s for this question.</p>",
          "text": "True",
          "weight": 0,
          "id": 846
        },
        {
          "comments": "",
          "comments_html": "",
          "text": "False",
          "weight": 100,
          "id": 9237
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120503,
      "quiz_group_id": null,
      "assessment_question_id": 182808,
      "position": null,
      "question_name": "Mass Assignment: Class Initialization",
      "question_type": "multiple_answers_question",
      "question_text": "<p>What are some of the benefits of combining metaprogramming with mass assignment\nwhen declaring classes? Select <strong>all</strong> that apply.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/mass-assignment-and-class-initialization\">Mass Assignment and Class Initialization</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5562,
          "text": "",
          "comments": "",
          "comments_html": "<p>Perfect! We can map any key in a Hash, regardless of its name, to an attribute\non an object in <code>#initialize</code>.</p>",
          "weight": 100.0,
          "html": "<p>Our code is more flexible because it doesn't have to rely on attributes with\nfixed names</p>"
        },
        {
          "id": 7326,
          "text": "",
          "comments": "",
          "comments_html": "<p>Yes! We no longer have to rely on a fixed number of arguments to be present in\nany method.</p>",
          "weight": 100.0,
          "html": "<p>We can make classes more flexible by adding any number of attributes based on\nour needs at the time without editing <code>#initialize</code></p>"
        },
        {
          "id": 8743,
          "text": "",
          "comments": "",
          "comments_html": "<p>Amazing! Using metaprogramming, we can add as many getters and setters as there\nare keys in the Hash that's provided when an object is instantiated.</p>",
          "weight": 100.0,
          "html": "<p>We can dynamically add getter and setter methods</p>"
        },
        {
          "id": 4812,
          "text": "",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0,
          "html": "<p>I don't know</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120504,
      "quiz_group_id": null,
      "assessment_question_id": 182809,
      "position": null,
      "question_name": "Mass Assignment: Class Initialization",
      "question_type": "multiple_choice_question",
      "question_text": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:age</span><span class=\"p\">,</span> <span class=\"ss\">:email</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">)</span>\n    <span class=\"vi\">@name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span>\n    <span class=\"vi\">@age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n    <span class=\"vi\">@email</span> <span class=\"o\">=</span> <span class=\"n\">email</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>How can we use mass assignment and metaprogramming so that both of the following\ncode snippets run successfully:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"n\">hambo</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"s1\">'Hambo'</span><span class=\"p\">,</span> <span class=\"ss\">age: </span><span class=\"mi\">22</span><span class=\"p\">)</span>\n<span class=\"nb\">puts</span> <span class=\"n\">hambo</span><span class=\"p\">.</span><span class=\"nf\">name</span>\n\n<span class=\"n\">jambaby</span> <span class=\"o\">=</span> <span class=\"no\">User</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"ss\">name: </span><span class=\"s1\">'JamBaby'</span><span class=\"p\">,</span> <span class=\"ss\">age: </span><span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"ss\">email: </span><span class=\"s1\">'jam@baby.com'</span><span class=\"p\">,</span> <span class=\"ss\">title: </span><span class=\"s1\">'Dr.'</span><span class=\"p\">)</span>\n<span class=\"nb\">puts</span> <span class=\"n\">jambaby</span><span class=\"p\">.</span><span class=\"nf\">title</span>\n</code></pre></div>\n<p>Choose the <strong>best</strong> option.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/mass-assignment-and-class-initialization\">Mass Assignment and Class Initialization</a></li></ul><p></p>",
      "answers": [
        {
          "id": 7976,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span>\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">attributes</span><span class=\"p\">)</span>\n    <span class=\"n\">attributes</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">|</span>\n      <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">class</span><span class=\"p\">.</span><span class=\"nf\">attr_accessor</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n      <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">=\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Wow!! We can dynamically add the setter and getter methods, and the values of\nthe attributes by iterating through the <code>attributes</code> Hash.</p>",
          "weight": 100.0
        },
        {
          "id": 8257,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:age</span><span class=\"p\">,</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"ss\">:title</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">attributes</span><span class=\"p\">)</span>\n    <span class=\"n\">attributes</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">|</span>\n      <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">=\"</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Although this would work, it's not the best option in this case. This would\nrequire us to manually add every possible attribute when invoking\n<code>attr_accessor</code>.</p>",
          "weight": 0.0
        },
        {
          "id": 9975,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">User</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:age</span><span class=\"p\">,</span> <span class=\"ss\">:email</span><span class=\"p\">,</span> <span class=\"ss\">:title</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"n\">attributes</span><span class=\"p\">)</span>\n    <span class=\"vi\">@name</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"ss\">:name</span><span class=\"p\">]</span>\n    <span class=\"vi\">@age</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"ss\">:age</span><span class=\"p\">]</span>\n    <span class=\"vi\">@email</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"ss\">:email</span><span class=\"p\">]</span>\n    <span class=\"vi\">@title</span> <span class=\"o\">=</span> <span class=\"n\">attributes</span><span class=\"p\">[</span><span class=\"ss\">:title</span><span class=\"p\">]</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Although this would work, it's not the best option. This would require us to\nmanually add every possible attribute when invoking <code>attr_accessor</code> and inside\n<code>#initialize</code>. This code is neither flexible nor abstract.</p>",
          "weight": 0.0
        },
        {
          "id": 354,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}