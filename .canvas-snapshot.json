{
  "quiz": {
    "id": 19085,
    "title": "Mass Assignment Quiz",
    "html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19085",
    "mobile_url": "https://learning.flatironschool.com/courses/3299/quizzes/19085?force_user=1&persist_headless=1",
    "description": "<div>\n<div><span>It's time to check your knowledge! Use this quiz to create a custom study guide. Note any answers that were marked incorrect, so you can study the relevant material and try this quiz again.</span></div>\n<br>\n<div><span>If you don't know the answer to a question, please do not guess. Instead, select \"I don't know\". It's OK not to know everything and to admit when we're unsure.</span></div>\n</div>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 8,
    "points_possible": 8.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_19085"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19085/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19085/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19085/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19085/submission_versions",
    "assignment_id": 129360,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 6376,
    "show_correct_answers_last_attempt": true,
    "version_number": 4,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "gb10d37a7c1b2a9ec1a090650a38b8eb5",
    "question_types": [
      "multiple_choice_question",
      "multiple_answers_question",
      "true_false_question"
    ]
  },
  "questions": [
    {
      "quiz_id": 19085,
      "id": 120495,
      "quiz_group_id": null,
      "assessment_question_id": 182800,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<div><span>We are declaring a method that needs to take five arguments. What is the best way to declare this method?</span></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments?module_item_id=143850\" target=\"_blank\">Keyword Arguments</a></p>",
      "answers": [
        {
          "id": 9839,
          "text": "Use keyword arguments",
          "html": "",
          "comments": "",
          "comments_html": "Correct! By using keyword arguments, we can associate each value with a meaningful key or name.",
          "weight": 100.0
        },
        {
          "id": 4993,
          "text": "Use regular arguments separated with commas",
          "html": "",
          "comments": "",
          "comments_html": "Not quite. What happens if another dev calls the method with the arguments in the wrong order?",
          "weight": 0.0
        },
        {
          "id": 2845,
          "text": "I don't know",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        },
        {
          "id": 1928,
          "text": "Neither of these approaches is better than the other",
          "html": "",
          "comments": "",
          "comments_html": "<p>Not quite. By using keyword arguments, we can associate each value with a meaningful key or name which means we don't need to worry about the order the arguments are passed in.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120496,
      "quiz_group_id": null,
      "assessment_question_id": 182802,
      "position": null,
      "question_name": "Question",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">greeting</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">programming_language</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-en\">puts</span> <span class=\"pl-s\">\"Hello, <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>name<span class=\"pl-kos\">}</span></span>\"</span>\n  <span class=\"pl-en\">puts</span> <span class=\"pl-s\">\"Welcome to the <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>programming_language<span class=\"pl-kos\">}</span></span> curriculum\"</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-en\">greeting</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Ruby\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"Leroy Jenkins\"</span><span class=\"pl-kos\">)</span></pre>\n<p><span>What will the code sample above output?</span></p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments?module_item_id=143850\" target=\"_blank\">Keyword Arguments</a></p>",
      "answers": [
        {
          "id": 86,
          "text": "",
          "html": "<pre>Hello, Ruby\nWelcome to the Leroy Jenkins curriculum</pre>",
          "comments": "",
          "comments_html": "Exactly! The method will use the arguments in the order they were provided.",
          "weight": 100.0
        },
        {
          "id": 3617,
          "text": "",
          "html": "<pre>Hello, Leroy Jenkins\nWelcome to the Ruby curriculum</pre>",
          "comments": "",
          "comments_html": "Take a look at the code block again. In which order will the method receive and use the arguments?",
          "weight": 0.0
        },
        {
          "id": 658,
          "text": "I don't know",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120497,
      "quiz_group_id": null,
      "assessment_question_id": 182803,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">greeting</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">programming_language</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-en\">puts</span> <span class=\"pl-s\">\"Hello, <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>name<span class=\"pl-kos\">}</span></span>\"</span>\n  <span class=\"pl-en\">puts</span> <span class=\"pl-s\">\"Welcome to the <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>programming_language<span class=\"pl-kos\">}</span></span> curriculum\"</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-en\">greeting</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">programming_language</span>: <span class=\"pl-s\">\"Ruby\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">name</span>: <span class=\"pl-s\">\"Leroy Jenkins\"</span><span class=\"pl-kos\">)</span></pre>\n<p><span>What will the code sample above output?</span></p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments?module_item_id=143850\" target=\"_blank\">Keyword Arguments</a></p>",
      "answers": [
        {
          "id": 8115,
          "text": "",
          "html": "<pre>ArgumentError: wrong number of arguments (given 1, expected 2)</pre>",
          "comments": "",
          "comments_html": "<p>Fantastic! Because we have not set up our method with keyword arguments, passing a Hash instead of two separate arguments will give us an argument error.</p>",
          "weight": 100.0
        },
        {
          "id": 5885,
          "text": "",
          "html": "<pre>Hello, Ruby\nWelcome to the Leroy Jenkins curriculum</pre>",
          "comments": "",
          "comments_html": "Not quite. What would have to change about how <code>greeting</code> is invoked for the code to produce this output.",
          "weight": 0.0
        },
        {
          "id": 9624,
          "text": "",
          "html": "<pre>Hello, Leroy Jenkins\nWelcome to the Ruby curriculum</pre>",
          "comments": "",
          "comments_html": "Not quite. For the code to produce this output, what would need to change in the method declaration?",
          "weight": 0.0
        },
        {
          "id": 4622,
          "text": "I don't know",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120498,
      "quiz_group_id": null,
      "assessment_question_id": 182804,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<p><span>Consider the following code:</span></p>\n<pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">greeting</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span>:<span class=\"pl-kos\">,</span> <span class=\"pl-s1\">programming_language</span>:<span class=\"pl-kos\">)</span>\n  <span class=\"pl-en\">puts</span> <span class=\"pl-s\">\"Hello, <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>name<span class=\"pl-kos\">}</span></span>\"</span>\n  <span class=\"pl-en\">puts</span> <span class=\"pl-s\">\"Welcome to the <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>programming_language<span class=\"pl-kos\">}</span></span> curriculum\"</span>\n<span class=\"pl-k\">end</span>\n\n<span class=\"pl-en\">greeting</span><span class=\"pl-kos\">(</span><span class=\"pl-pds\">name</span>: <span class=\"pl-s\">\"Leroy Jenkins\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">programming_language</span>: <span class=\"pl-s\">\"Ruby\"</span><span class=\"pl-kos\">)</span></pre>\n<p><span>What will the code sample above output?</span></p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments?module_item_id=143850\" target=\"_blank\">Keyword Arguments</a></p>",
      "answers": [
        {
          "id": 9063,
          "text": "",
          "html": "<pre>Hello, Leroy Jenkins\nWelcome to the Ruby curriculum</pre>",
          "comments": "",
          "comments_html": "Yes! <code>greeting</code> is using keyword arguments, so when we pass a Hash containing key-value pairs, it correctly maps those values to the appropriate arguments.",
          "weight": 100.0
        },
        {
          "id": 2838,
          "text": "",
          "html": "<pre>Hello, Ruby\nWelcome to the Leroy Jenkins curriculum</pre>",
          "comments": "",
          "comments_html": "Take a look at the method and how it's invoked. Which value will be used where?",
          "weight": 0.0
        },
        {
          "id": 3285,
          "text": "",
          "html": "<pre>ArgumentError: wrong number of arguments (given 1, expected 2)</pre>",
          "comments": "",
          "comments_html": "<code>greeting</code> was declared with keyword arguments. What data type do we pass to methods that use keyword arguments?",
          "weight": 0.0
        },
        {
          "id": 1937,
          "text": "",
          "html": "I don't know",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120500,
      "quiz_group_id": null,
      "assessment_question_id": 182806,
      "position": null,
      "question_name": "Mass Assignment: Keyword Arguments",
      "question_type": "multiple_choice_question",
      "question_text": "<p>We want to be able to do the following:</p>\n<pre><code>\nrat_counter(rat_count: 2, train_line: \"B train\")\n# =&gt; Returns \"There are 2 rats on the B train\"\n</code></pre>\n<p>Which <code>rat_counter</code> method will achieve this? Choose the <strong>best</strong> option.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/keyword-arguments?module_item_id=143850\" target=\"_blank\">Keyword Arguments</a></p>",
      "answers": [
        {
          "id": 4770,
          "text": "",
          "html": "<pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">rat_counter</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rat_count</span>:<span class=\"pl-kos\">,</span> <span class=\"pl-s1\">train_line</span>:<span class=\"pl-kos\">)</span>\n  <span class=\"pl-s\">\"There are <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>rat_count<span class=\"pl-kos\">}</span></span> rats on the <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>train_line<span class=\"pl-kos\">}</span></span>.\"</span>\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "Perfect! By using keyword arguments, we can pass a Hash to the method and return a String with all of the values in their right places.",
          "weight": 100.0
        },
        {
          "id": 9066,
          "text": "",
          "html": "<pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">rat_counter</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rat_count</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">train_line</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s\">\"There are <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>rat_count<span class=\"pl-kos\">}</span></span> rats on the <span class=\"pl-s1\"><span class=\"pl-kos\">#{</span>train_line<span class=\"pl-kos\">}</span></span>.\"</span>\n<span class=\"pl-k\">end</span></pre>",
          "comments": "",
          "comments_html": "Not quite. This method takes two separate arguments and the order of those arguments will matter. What changes can we make to fix this so that it takes a Hash when it's invoked?",
          "weight": 0.0
        },
        {
          "id": 20,
          "text": "I don't know",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        },
        {
          "id": 6759,
          "text": "Either of these options will work",
          "html": "",
          "comments": "",
          "comments_html": "<p>Not quite. We need to set up our method to use keyword arguments in order to be able to pass in a Hash when it's invoked.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120501,
      "quiz_group_id": null,
      "assessment_question_id": 183438,
      "position": null,
      "question_name": "Mass Assignment: Class Initialization",
      "question_type": "true_false_question",
      "question_text": "<p>Consider the following code:</p>\n<pre><span class=\"pl-k\">class</span> <span class=\"pl-v\">User</span>\n  <span class=\"pl-en\">attr_accessor</span> <span class=\"pl-pds\">:name</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">:age</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">:location</span><span class=\"pl-kos\">,</span> <span class=\"pl-pds\">:user_name</span>\n\n  <span class=\"pl-k\">def</span> <span class=\"pl-en\">initialize</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">user_name</span>:<span class=\"pl-kos\">,</span> <span class=\"pl-s1\">name</span>:<span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span>:<span class=\"pl-kos\">,</span> <span class=\"pl-s1\">location</span>:<span class=\"pl-kos\">)</span>\n    <span class=\"pl-c1\">@user_name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">user_name</span>\n    <span class=\"pl-c1\">@name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n    <span class=\"pl-c1\">@location</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">location</span>\n    <span class=\"pl-c1\">@age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span>\n  <span class=\"pl-k\">end</span>\n<span class=\"pl-k\">end</span></pre>\n<p><span>The above code snippet is considered&nbsp;</span><em>metaprogramming</em><span>.</span></p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "<p>Correct! Here we are explicitly specifying the names of our attributes. In metaprogramming, we **abstract away** the attribute names by using the `send` method.</p>",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s: </strong><a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/mass-assignment-and-class-initialization?module_item_id=143851\" target=\"_blank\">Mass Assignment and Class Initialization</a></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Here we are explicitly specifying the names of our attributes. In metaprogramming, we **abstract away** the attribute names by using the `send` method. <span>Be sure to study the source/s for this question.</span></p>",
          "text": "True",
          "weight": 0,
          "id": 7187
        },
        {
          "comments": "",
          "comments_html": "",
          "text": "False",
          "weight": 100,
          "id": 5007
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120503,
      "quiz_group_id": null,
      "assessment_question_id": 182808,
      "position": null,
      "question_name": "Mass Assignment: Class Initialization",
      "question_type": "multiple_answers_question",
      "question_text": "<div><span>What are some of the benefits of combining metaprogramming with mass assignment when declaring classes? Select <strong>all</strong> that apply.</span></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/mass-assignment-and-class-initialization?module_item_id=143851\" target=\"_blank\">Mass Assignment and Class Initialization</a></p>",
      "answers": [
        {
          "id": "1175",
          "text": "Our code is more flexible because it doesn't have to rely on attributes with fixed names",
          "comments": "",
          "comments_html": "Perfect! We can map any key in a Hash, regardless of its name, to an attribute on an object in <code>#initialize</code>.",
          "weight": 100.0
        },
        {
          "id": "7087",
          "text": "",
          "comments": "",
          "comments_html": "Yes! We no longer have to rely on a fixed number of arguments to be present in any method.",
          "weight": 100.0,
          "html": "We can make classes more flexible by adding any number of attributes based on our needs at the time without editing <code>#initialize</code>"
        },
        {
          "id": "7165",
          "text": "We can dynamically add getter and setter methods",
          "comments": "",
          "comments_html": "Amazing! Using metaprogramming, we can add as many getters and setters as there are keys in the Hash that's provided when an object is instantiated.",
          "weight": 100.0
        },
        {
          "id": "2028",
          "text": "I don't know",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19085,
      "id": 120504,
      "quiz_group_id": null,
      "assessment_question_id": 182809,
      "position": null,
      "question_name": "Mass Assignment: Class Initialization",
      "question_type": "multiple_choice_question",
      "question_text": "<pre><code>\nclass User\n  attr_accessor :name, :age, :email\n\n  def initialize(name, age, email)\n    @name = name\n    @age = age\n    @email = email\n  end\nend\n</code></pre>\n<p>How can we use mass assignment and metaprogramming so that both of the following code snippets run successfully:</p>\n<pre><code>\nhambo = User.new(name: 'Hambo', age: 22)\nputs hambo.name\n\njambaby = User.new(name: 'JamBaby', age: 67, email: 'jam@baby.com', title: 'Dr.')\nputs jambaby.title\n</code></pre>\n<p>Choose the <strong>best</strong> option.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s</strong>: <a class=\"inline_disabled\" href=\"https://learning.flatironschool.com/courses/3299/pages/mass-assignment-and-class-initialization?module_item_id=143851\" target=\"_blank\">Mass Assignment and Class Initialization</a></p>",
      "answers": [
        {
          "id": 5815,
          "text": "",
          "html": "<pre><code>\nclass User\n  def initialize(attributes)\n    attributes.each do |key, value|\n      self.class.attr_accessor(key)\n      self.send(\"#{key}=\", value)\n    end\n  end\nend\n</code></pre>",
          "comments": "",
          "comments_html": "Wow!! We can dynamically add the setter and getter methods, and the values of the attributes by iterating through the <code>attributes</code> Hash.",
          "weight": 100.0
        },
        {
          "id": 5107,
          "text": "",
          "html": "<pre><code>\nclass User\n  attr_accessor :name, :age, :email, :title\n\n  def initialize(attributes)\n    attributes.each do |key, value|\n      self.send(\"#{key}=\", value)\n    end\n  end\nend\n</code>\n</pre>",
          "comments": "",
          "comments_html": "Although this would work, it's not the best option in this case. This would require us to manually add every possible attribute when invoking <code>attr_accessor</code>.",
          "weight": 0.0
        },
        {
          "id": 2127,
          "text": "",
          "html": "<pre><code>\nclass User\n  attr_accessor :name, :age, :email, :title\n\n  def initialize(attributes)\n    @name = attributes[:name]\n    @age = attributes[:age]\n    @email = attributes[:email]\n    @title = attributes[:title]\n  end\nend\n</code>\n</pre>",
          "comments": "",
          "comments_html": "Although this would work, it's not the best option. This would require us to manually add every possible attribute when invoking <code>attr_accessor</code> and inside <code>#initialize</code>. This code is neither flexible nor abstract.",
          "weight": 0.0
        },
        {
          "id": 3624,
          "text": "I don't know",
          "html": "",
          "comments": "",
          "comments_html": "Be sure to study the source/s for this question. You'll get it next time.",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}